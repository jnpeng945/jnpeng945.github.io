<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git的基本使用</title>
    <link href="/project/2021/11/15/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/project/2021/11/15/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Git ：开源的分布式版本控制系统，可以有效、高速地处理项目的版本管理。</p><table><thead><tr><th align="center">集中式版本控制</th><th align="center">分布式版本控制</th></tr></thead><tbody><tr><td align="center">仅中心服务器拥有一份代码</td><td align="center">每个人的电脑上都有一份代码</td></tr><tr><td align="center">需要联网才能工作</td><td align="center">不需要联网也能工作</td></tr><tr><td align="center">新建分支相当于复制一份完整代码</td><td align="center">新建/合并分支速度很快</td></tr></tbody></table><span id="more"></span><div align = center><img src = "https://figs-1308257758.cos.ap-nanjing.myqcloud.com/img/image-20211129194208864.png" width = 700px></div><center>git 工作流</center><p>新建一个仓库 <code>workspace</code> 之后，当前目录就成了一个工作区，工作区下有一个隐藏目录 <code>.git</code> ，其属于 <code>Git</code> 的版本库。</p><p>版本库有一个 <code>Stage</code> 的暂存区以及最后的 <code>History</code> 版本库，<code>History</code> 存储所有分支信息，使用一个 <code>HEAD</code> 指针指向当前分支。</p><div align = center><img src = "https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208195941661.png" width = 550px></div><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行 <code>git init</code> 以创建新的 git 仓库。</p><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><p>创建本地仓库的克隆版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> /path/to/repository<br></code></pre></td></tr></table></figure><p>克隆远端服务器上的仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> username@host:/path/to/repository<br></code></pre></td></tr></table></figure><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵“树”组成。</p><p>第一个是你的 <code>工作目录</code>，它持有实际文件；</p><p>第二个是 <code>暂存区（Index）</code>，它像个缓存区域，临时保存你的改动；</p><p>最后是 <code>HEAD</code>，它指向你最后一次提交的结果。</p><h2 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h2><p>提出更改（把它们添加到暂存区）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add &lt;filename&gt;<br>$ git add *<br></code></pre></td></tr></table></figure><p>实际提交改动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git commit -m <span class="hljs-string">&quot;代码提交信息&quot;</span><br></code></pre></td></tr></table></figure><p>现在，你的改动已经提交到了 <strong>HEAD</strong>，但是还没到你的远端仓库。</p><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 <strong>HEAD</strong> 中了。将这些改动提交到远端仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push origin master<br></code></pre></td></tr></table></figure><p>可以把 <em>master</em> 换成你想要推送的任何分支。</p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote add origin &lt;server&gt;<br></code></pre></td></tr></table></figure><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><div align = center><img src = "https://figs-1308257758.cos.ap-nanjing.myqcloud.com/img/image-20211129213001037.png" width = 550px></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout -b feature_x<span class="hljs-comment"># 创建一个叫做“feature_x”的分支，并切换过去</span><br>$ git checkout master<span class="hljs-comment"># 切换回主分支</span><br>$ git branch -d feature_x<span class="hljs-comment"># 把新建的分支删掉</span><br><span class="hljs-comment"># 除非你将分支推送到远端仓库，不然该分支就是仅自己可见的</span><br>$ git push origin &lt;branch&gt;<br></code></pre></td></tr></table></figure><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git pull<span class="hljs-comment"># 更新本地仓库获取（fetch） 并 合并（merge） 远端的改动</span><br>$ git merge &lt;branch&gt;<span class="hljs-comment"># 要合并其他分支到你的当前分支（例如 master）</span><br><span class="hljs-comment"># 此时可能出现冲突（conflicts），需要手动合并这些冲突（conflicts）</span><br>$ git add &lt;filename&gt;<span class="hljs-comment"># 改动后，将它们标记为合并成功</span><br>$ git diff &lt;source_branch&gt; &lt;target_branch&gt;<span class="hljs-comment"># 合并改动前，预览差异</span><br></code></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git tag 1.0.0 1b2e1d63ff<span class="hljs-comment"># 创建一个叫做 1.0.0 的标签</span><br><span class="hljs-comment"># 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符</span><br>$ git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 获取提交 ID</span><br></code></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><span class="hljs-comment"># 了解本地仓库的历史记录</span><br>$ git <span class="hljs-built_in">log</span> --author=bob<span class="hljs-comment"># 只看某一个人的提交记录</span><br>$ git <span class="hljs-built_in">log</span> --pretty=oneline<span class="hljs-comment"># 一个压缩后的每一条提交记录只占一行的输出</span><br>$ git <span class="hljs-built_in">log</span> --graph --oneline --decorate --all<span class="hljs-comment"># ASCII 艺术的树形结构来展示所有的分支, 每个分支都标示了他的名字和标签</span><br>$ git <span class="hljs-built_in">log</span> --name-status<span class="hljs-comment"># 看看哪些文件改变了</span><br>$ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout -- &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p><hr><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git fetch origin<br>$ git reset --hard origin/master<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="http://rogerdudler.github.io/git-guide/index.zh.html">Git - 简明指南</a></p><p><a href="http://www.cyc2018.xyz/%E5%85%B6%E5%AE%83/%E7%BC%96%E7%A0%81%E5%AE%9E%E8%B7%B5/Git.html#git-%E5%91%BD%E4%BB%A4%E4%B8%80%E8%A7%88">CSNotes-Git</a></p><p><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解 Git(opens new window)</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰 : Git 教程(opens new window)</a></p><p><a href="https://learngitbranching.js.org/">Learn Git Branching</a></p><p>Git 中文教程<a href="https://git-scm.com/book/zh/v2">文档地址</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下vim与tmux的使用</title>
    <link href="/project/2021/11/14/vim%E4%B8%8Etmux%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/project/2021/11/14/vim%E4%B8%8Etmux%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><code>vim</code> 编辑器是在终端运行的文本代码编辑器。</p><p><code>tmux</code> 是 linux 中一种管理窗口的程序，支持多标签、分割窗口以及窗口组随时存储和恢复的功能。</p><span id="more"></span><h2 id="Vim-使用指南"><a href="#Vim-使用指南" class="headerlink" title="Vim 使用指南"></a>Vim 使用指南</h2><p><code>vim</code> 编辑器是在终端运行的文本代码编辑器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sequence">Title: 标题：Vim 编辑器三种模式切换<br>命令模式-&gt;插入模式: 输入 i<br>Note left of 命令模式: 进入 vim 的初始状态<br>Note right of 底线命令模式: 保存退出:wq，退出:q，强制退出:q!<br>插入模式-&gt;命令模式: ESC<br>命令模式-&gt;底线命令模式: 输入:<br>底线命令模式-&gt;命令模式: 命令以回车结束运行<br># participant C<br># Note right of C: 没人陪我玩<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph LRA[修改vim配置文件]--&gt; B[配置相应命令]</code></pre><p>一般我们可以在 <code>github</code> 上找别人配置好的 <code>.vimrc</code>  文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim ~/.vimrc<span class="hljs-comment">#在当前用户的根目录下新建 .vimrc 文件</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 底线命令模式输入以下命令</span><br><span class="hljs-meta">$</span><span class="bash"> syntax on<span class="hljs-comment"># 语法高亮</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">set</span> number<span class="hljs-comment"># 设置行号</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">set</span> nonumber<span class="hljs-comment"># 取消行号设置</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置好 vim 配置文件之后，保存退出之后，下次再进入就自动设置了语法高亮并且设置了行号</span><br></code></pre></td></tr></table></figure><p>常用的 <code>vim</code> 快捷键</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">h（左） j（下） k（上） l （右）<br>w# 每次跳一个单词<br>b# 往回跳<br>ctrl + f# forword 往下翻页<br>ctrl + b# 往上翻页<br>88gg# 跳到 88 行<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 往下，往上跳指定行</span> <br>10j# 往下跳 10 行<br>10k# 往上跳 10 行<br><br>/[内容]# 查找内容 <br>按下 n 键可以跳到下一个查找的目标结果，shift + n 跳到上一个目标结果<br><br>cc# 剪贴当前行<br>c2c# 剪贴底下两行<br>u# 撤销删除操作<br>pp# 粘贴刚刚剪贴的内容<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 批量选择</span><br><span class="hljs-meta">#</span><span class="bash"> 1. 命令模式中，按下 v 进入 visual 模式，然后搭配 hjkl（左下上右）键位使用，进行批量选择。</span><br><span class="hljs-meta">#</span><span class="bash"> 2. 搭配 c（剪贴） p（粘贴） u（撤销）键位使用</span><br>yy# 复制当前行内容<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 自动补全</span><br>ctrl + n# 出现选项之后，按下 enter<br></code></pre></td></tr></table></figure><p>:star: <code>vim</code> 插件管理器 + <strong>vim 自动补全插件</strong></p><ul><li><p>预先安装 <code>git</code> 和 <code>curl</code></p></li><li><p>安装 vim plug 插件（vim 插件管理软件），在 github 上下载；<a href="https://github.com/junegunn/vim-plug">链接</a></p></li><li><p>```shell<br>curl -fLo ~/.vim/autoload/plug.vim –create-dirs \</p><pre><code>https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</code></pre><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><br>- 修改 `~/.vimrc` 文件<br><br>  ```shell<br>  # 末尾添加<br>  call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">begin</span><span class="hljs-params">()</span></span><br>  Plug &#x27;scrooloose/nerdtree&#x27;# 添加的插件名字<br>  call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">end</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure></li><li><p>任意打开一个文件，假设我们 <code>vim code.cpp</code>，然后在 <code>code.cpp</code> 的底线命令模式下输入 <code>:PlugInstall</code></p></li></ul><blockquote><p><a href="https://github.com/junegunn/vim-plug">https://github.com/junegunn/vim-plug</a></p><p><a href="https://vimawesome.com/plugin/nerdtree-red">https://vimawesome.com/plugin/nerdtree-red</a></p></blockquote><div align = center><img src = "https://figs-1308257758.cos.ap-nanjing.myqcloud.com/img/Linux%E4%B8%8Bvim%E4%BD%BF%E7%94%A8_1.png" width = "600px" /></div><p>:star: 上面所示我们已经安装了一个插件 <code>NERDTree</code> ，使用方式：</p><ol><li><p>首先随意打开一个文件，假设打开 <code>vim code.c</code> </p></li><li><p>输入 <code>:NERDTree</code>，实现像目录一样浏览系统中的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换左右两边窗口</span><br>按两次 ctrl + w<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 打开该文件</span><br>Enter<br></code></pre></td></tr></table></figure></li></ol><p>:star: 每次使用 <code>vim</code> 都打开 <code>NERDTree</code> 插件的解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Just write this line to your .vimrc :</span><br>autocmd VimEnter * NERDTree<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://stackoverflow.com/questions/3788903/how-to-start-vim-with-nerd-tree-opened-automatically#">execute nerdtree automatically</a></p></blockquote><p>:star: 删除插件的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PlugClean<br></code></pre></td></tr></table></figure><h2 id="Tmux-使用指南"><a href="#Tmux-使用指南" class="headerlink" title="Tmux 使用指南"></a>Tmux 使用指南</h2><p><code>tmux</code> 是 linux 中一种管理窗口的程序，支持多标签、分割窗口以及窗口组随时存储和恢复的功能。<code>tmux</code> 的主要元素分为三层：</p><ul><li><em>Session</em> 一组窗口的集合， 通常用来概括同一个任务。<em>session</em> 可以有自己的名字便于任务之间的切换。</li><li><em>Window</em> 单个可见窗口。<em>Windows</em> 有自己的编号，也可以认为和 ITerm2 中的 <em>Tab</em> 类似。</li><li><em>Pane</em> 窗格，被划分成小块的窗口，类似于 <em>Vim</em> 中 C-w +v 后的效果。</li></ul><div align = center><img src = "https://figs-1308257758.cos.ap-nanjing.myqcloud.com/img/Linux%E4%B8%8Btmux%E4%BD%BF%E7%94%A8_1.png" width = "500px"/></div><p><code>tmux</code>：即使关闭 tmux，下次重新 attch 时，之前的东西还在服务器后台运行。为便于表述我们定义 <code>pre = ctrl + b</code> ，实际上我们使用时一般会修改 <code>tmux</code> 配置文件 <code>vim ~/.tmux.conf</code>，将快捷键 <code>ctrl+b</code> 改为 <code>ctrl+a</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">### panes</span><br>pre + %<span class="hljs-comment"># 水平分割 pane</span><br>pre + <span class="hljs-string">&quot;# 垂直分割 pane</span><br><span class="hljs-string">exit# 退出pane</span><br><span class="hljs-string">pre + z# 放大当前的 pane</span><br><span class="hljs-string">pre + z# 复原之前的 pane 状态(缩小)</span><br><span class="hljs-string">pre + 上下左右# 切换 pane</span><br><span class="hljs-string">alt + 上下左右# 切换 pane（这个需要修改配置文件）</span><br><span class="hljs-string"></span><br><span class="hljs-string">### windows</span><br><span class="hljs-string">pre + c# 创建一个新的 window</span><br><span class="hljs-string">pre + 数字1，2# 在不同window 之间移动</span><br><span class="hljs-string">pre + &amp;# 关闭当前 window</span><br><span class="hljs-string"># 重命名window，创建一个新的 window 之后，除了数字编号不同外，window 名称都是一样的</span><br><span class="hljs-string">pre + ,# 更改 window 名称</span><br><span class="hljs-string"></span><br><span class="hljs-string">### session</span><br><span class="hljs-string">tmux ls# 查看所有的 session(正常运行显示 attach)</span><br><span class="hljs-string">pre + $# 每个 session 一般对应于一个 project</span><br><span class="hljs-string">tmux new -s [名字]# 创建 session 时直接命名</span><br><span class="hljs-string">pre + d# 退出session（挂起）</span><br><span class="hljs-string">tmux a -t [名字]# 重新连接某个session</span><br><span class="hljs-string">tmux a# 仅有一个session 时这是最快的连接方式</span><br><span class="hljs-string">tmux kill-session -a -t [名字] # 删除[名字]以外的session</span><br></code></pre></td></tr></table></figure><p>从 <code>tmux</code> 中往外复制东西的方法：</p><p>先按住 <code>shift</code> 不放，用鼠标选中复制的内容，松开 <code>shift</code> ，再按 <code>ctrl+insert</code> 复制；然后在电脑上按 <code>shift+insert</code> 粘贴。 </p><p>常用的 <code>tmux</code> 配置，<code>vim ~/.tmux.conf</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Send prefix: ctr + b 改为 ctr + a</span><br>set-option -g prefix C-a<br>unbind-key C-a<br>bind-key C-a send-prefix<br><br><span class="hljs-comment"># Use Alt-arrow keys to switch panes</span><br><span class="hljs-comment"># 不用 prefix，直接 alt + 箭头在 pane 之间 switch</span><br><span class="hljs-built_in">bind</span> -n M-Left select-pane -L<br><span class="hljs-built_in">bind</span> -n M-Right select-pane -R<br><span class="hljs-built_in">bind</span> -n M-Up select-pane -U<br><span class="hljs-built_in">bind</span> -n M-Down select-pane -D<br><br><span class="hljs-comment"># Shift arrow to switch windows</span><br><span class="hljs-comment"># 不用按prefix，直接用shift+箭头在window之间switch</span><br><span class="hljs-built_in">bind</span> -n S-Left previous-window<br><span class="hljs-built_in">bind</span> -n S-Right next-window<br><br><span class="hljs-comment"># Mouse mode</span><br><span class="hljs-built_in">set</span> -g mouse on<br><br><span class="hljs-comment"># Set easier window split keys</span><br>bind-key v split-window -h<br>bind-key h split-window -v<br><br><span class="hljs-comment"># Easy config reload</span><br>bind-key r source-file ~/.tmux.conf \; display-message <span class="hljs-string">&quot;tmux.conf reloaded&quot;</span><br></code></pre></td></tr></table></figure><p>更改了 <code>.tmux.conf</code> 后，在 <code>tmux</code> 里的快捷键没有变化。<code>tmux</code> 只有在新建 <em>session</em> 的时候，才会去找 <code>tmux.conf</code> 文件。</p><p>所以，之前创建的 <em>session</em> 都没有参考 <code>tmux.conf</code>， 所以可以用<code>tmux lstmux kill-session -a</code> 仅仅保留当前 <em>session</em>。再删除当前 <code>session</code>  <code>tmux kill-session -t py27</code>。这下删除了所有创建好的 <em>session</em>。</p><blockquote><p><a href="https://www.jianshu.com/p/fd3bbdba9dc9">tmux简洁教程及config关键配置</a></p><p><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">https://www.ruanyifeng.com/blog/2019/10/tmux.html</a></p><p><a href="http://cenalulu.github.io/linux/tmux/">http://cenalulu.github.io/linux/tmux/</a></p><p><a href="https://harttle.land/2015/11/06/tmux-startup.html">https://harttle.land/2015/11/06/tmux-startup.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
      <category>Vim tmux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/project/2021/11/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/project/2021/11/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>本文将对 Linux 系统进行简要介绍，并总结概括 Linux 系统下常用命令。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><span id="more"></span><table><thead><tr><th></th><th>区别</th><th>联系</th></tr></thead><tbody><tr><td>Linux</td><td>开源；可移植性强；使用简单；个人或企业用户；</td><td>网络为核心的设计思想源于Unix</td></tr><tr><td>Unix</td><td>商业软件银行（IBM 的 AIX）；高端定制化应用；</td><td></td></tr></tbody></table><h2 id="Linux-基础"><a href="#Linux-基础" class="headerlink" title="Linux 基础"></a>Linux 基础</h2><p><strong>Linux 启动流程：</strong></p><img src="https://figs-1308257758.cos.ap-nanjing.myqcloud.com/img/20211114165855.png" width = 700px><p><strong>内核引导</strong>：<code>BOIS</code> 自检并按照 <code>BIOS</code> 中设置的启动设备（硬盘）启动。</p><p><strong>运行</strong> <code>init</code> ：<code>init</code> 进程是系统所有进程的起点；</p><p><strong>运行级别</strong>：许多程序需要开机启动，Windows 系统中称为服务 <code>service</code>，Linux 系统中是守护进程 <code>daemon</code> 。<code>init</code> 进程任务之一就是去运行这些开机启动的程序。（Linux 系统服务器用作服务器时，需要启动 <code>Apache</code>）。运行级别就是针对不同场合设置不同的程序启动时机，Linux 系统中有 7 级。</p><p><strong>系统初始化</strong>：激活交换分区，检查磁盘，加载硬件模块等。</p><p><strong>用户登录系统</strong>：命令行、<code>ssh</code> 登录、图形界面；</p><p><strong>Linux 关机流程</strong>：</p><img src="https://figs-1308257758.cos.ap-nanjing.myqcloud.com/img/20211114170537.png" width = 500px><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ man<span class="hljs-comment"># 查看帮助文档</span><br>$ sync<span class="hljs-comment"># 将数据由内存同步到硬盘中。</span><br>$ shutdown<span class="hljs-comment">#关机指令</span><br>$ reboot<span class="hljs-comment">#重启 == shutdown –r now和init 6</span><br>$ halt<span class="hljs-comment">#关闭系统 == shutdown –h now 和 poweroff和 init 0</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight bash"><figcaption><span>/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── bin -&gt; usr/bin<span class="hljs-comment"># 常用的程序和指令</span><br>├── boot<span class="hljs-comment"># 启动 Linux 的内核文件，包括连接文件和镜像文件</span><br>├── dev<span class="hljs-comment"># Linux 外部设备</span><br>├── etc<span class="hljs-comment"># 系统的配置文件和子目录列表。更改将可能导致系统不能启动</span><br>├── home<span class="hljs-comment"># 普通用户的主目录</span><br>├── lib -&gt; usr/lib<span class="hljs-comment"># lib 基本代码库（C++库），基本动态连接共享库</span><br>├── lib32 -&gt; usr/lib32<br>├── lib64 -&gt; usr/lib64<br>├── libx32 -&gt; usr/libx32<br>├── lost+found<span class="hljs-comment"># 一般情况下是空的，当系统非法关机后，这里会存放一些文件</span><br>├── media<span class="hljs-comment"># 类似 Windows 的其他设备</span><br>├── mnt<span class="hljs-comment"># 共享文件夹（实现Windows和Linux虚拟机文件共享）</span><br>├── opt<span class="hljs-comment"># 默认为空，我们安装额外软件可以放在这个里面</span><br>├── proc<span class="hljs-comment"># 管理内存空间</span><br>├── root<span class="hljs-comment"># 系统管理员用户主目录</span><br>├── run<span class="hljs-comment"># 临时文件系统，存放系统启动以来的信息</span><br>├── sbin -&gt; usr/sbin<span class="hljs-comment"># 系统管理员才能用的程序和指令</span><br>├── srv<span class="hljs-comment"># 存放服务启动后需要提取的数据</span><br>├── swapfile<br>├── sys<span class="hljs-comment"># 内核源代码默认的放置目录</span><br>├── tmp<span class="hljs-comment"># 存放临时文件</span><br>├── usr<span class="hljs-comment"># unix shared resources，存放很多应用软件和文件</span><br>└── var<span class="hljs-comment"># 不断更改的文件，各种日志文件</span><br></code></pre></td></tr></table></figure><hr><p><strong>命令解析器</strong>：Linux 系统中提供了 <code>shell</code> （/bin/sh）、<code>bash</code>（/bin/bash）等，一般默认使用 <code>bash</code> 作为解析器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tab<span class="hljs-comment"># 补齐命令，补齐路径，显示当前目录下的所有目录</span><br>$ clear<span class="hljs-comment"># 清屏</span><br>$ ctrl + l<span class="hljs-comment"># 清屏</span><br>$ ctrl + c<span class="hljs-comment"># 中断进程</span><br>$ ctrl + u<span class="hljs-comment"># 删除光标前所有内容</span><br>$ ctrl + k<span class="hljs-comment"># 删除光标后的所有内容</span><br></code></pre></td></tr></table></figure><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="ls-命令-–-显示指定目录下的内容及属性信息"><a href="#ls-命令-–-显示指定目录下的内容及属性信息" class="headerlink" title="ls 命令 – 显示指定目录下的内容及属性信息"></a>ls 命令 – 显示指定目录下的内容及属性信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ls [参数] 目录路径<br>$ ls -l<span class="hljs-comment"># 查看当前目录下的详细信息，功能等价于 ll 命令</span><br>$ ls -a<span class="hljs-comment"># 查看当前目录下的所有文件（包含隐藏文件）</span><br>$ ls -la <span class="hljs-comment"># 查看当前目录下的所有文件（包含隐藏文件）的详细信息</span><br>$ ls -lh<span class="hljs-comment"># 查看当前目录下的文件的详细信息（增加可读性，带单位）</span><br>$ ls --<span class="hljs-built_in">help</span><span class="hljs-comment"># 查看命令帮助文档</span><br></code></pre></td></tr></table></figure><h3 id="cd-命令-切换目录"><a href="#cd-命令-切换目录" class="headerlink" title="cd 命令 - 切换目录"></a>cd 命令 - 切换目录</h3><p>相对路径：不是以 <code>/</code> 开头的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<span class="hljs-comment"># 表示当前目录</span><br>..<span class="hljs-comment"># 表示当前目录的上一级目录</span><br>~<span class="hljs-comment"># 表示当前用户的根目录，切记是当前用户</span><br><br>$ <span class="hljs-built_in">cd</span> ./bin<span class="hljs-comment"># 进入当前目录下的 bin 目录，功能等价于 cd bin/</span><br>$ <span class="hljs-built_in">cd</span> ../etc<span class="hljs-comment"># 进入和当前目录同级的 etc 目录</span><br></code></pre></td></tr></table></figure><h3 id="mkdir-命令-–-创建目录"><a href="#mkdir-命令-–-创建目录" class="headerlink" title="mkdir 命令 – 创建目录"></a>mkdir 命令 – 创建目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkdir dir<span class="hljs-comment"># 在当前目录下创建一个 dir 目录，功能等价于 mkdir ./dir</span><br>$ mkdir/root/tmp<span class="hljs-comment"># 在 /root 目录下创建一个 tmp 目录</span><br>$ mkdir -p a/b/c<span class="hljs-comment"># 在当前目录下创建 3 级目录</span><br></code></pre></td></tr></table></figure><h3 id="rmdir-命令-–-删除空目录"><a href="#rmdir-命令-–-删除空目录" class="headerlink" title="rmdir 命令 – 删除空目录"></a>rmdir 命令 – 删除空目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ rmdir [参数] 目录路径<span class="hljs-comment"># 默认仅删除空目录</span><br>$ rmdir./dir<span class="hljs-comment"># 删除当前目录下的 dir 目录</span><br>$ rmdir -p a/b/c<span class="hljs-comment"># 删除当前目录下的 a/b/c 目录</span><br></code></pre></td></tr></table></figure><h3 id="touch-命令-创建文件"><a href="#touch-命令-创建文件" class="headerlink" title="touch 命令 - 创建文件"></a>touch 命令 - 创建文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ touch 1.txt<span class="hljs-comment"># 当前目录下创建一个 1.txt 文件</span><br>$ touch ~/1.txt<span class="hljs-comment"># 当前用户的根目录下创建一个 1.txt 文件</span><br></code></pre></td></tr></table></figure><h3 id="rm-命令-删除文件"><a href="#rm-命令-删除文件" class="headerlink" title="rm 命令 - 删除文件"></a>rm 命令 - 删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ rm [参数] 路径<br>$ rm -r a<span class="hljs-comment"># 递归删除当前目录下 a 以及 a 目录 下的所有内容</span><br>$ rm -f 1.txt<span class="hljs-comment"># 强制删除该文件，不会提示</span><br>$ rm -rf a/<span class="hljs-comment"># 强制删除当前目录下的 a 目录以及 a 目录下的所有内容</span><br>$ rm -rf *<span class="hljs-comment"># 强制删除当前目录下的所有内容</span><br>$ rm -rf *.txt<span class="hljs-comment"># 强制删除当前目录下的所有 txt 文件</span><br>$ rm -rf *s*<span class="hljs-comment"># 删除当前目录下所有名字中包含 s 的文件或文件夹</span><br></code></pre></td></tr></table></figure><h3 id="pwd-命令-–-查看当前路径"><a href="#pwd-命令-–-查看当前路径" class="headerlink" title="pwd 命令 – 查看当前路径"></a>pwd 命令 – 查看当前路径</h3><p>Linux 下所有的绝对路径都是从根目录 <code>/</code> 开始，<code>/root</code> 是 root 用户的根目录，<code>/home</code> 是其他用户的默认根目录。</p><h3 id="cp-命令-–-拷贝文件"><a href="#cp-命令-–-拷贝文件" class="headerlink" title="cp 命令 – 拷贝文件"></a>cp 命令 – 拷贝文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cp 1.txt a/<span class="hljs-comment"># 将 1.txt 文件拷贝到 a 目录下</span><br>$ cp 1.txt 2.txt<span class="hljs-comment"># 将 1.txt 文件内容拷贝到 2.txt 文件中</span><br>$ cp -r a data<span class="hljs-comment"># 将 a 目录递归地拷贝 data 目录中</span><br></code></pre></td></tr></table></figure><h3 id="scp-命令-远程拷贝文件"><a href="#scp-命令-远程拷贝文件" class="headerlink" title="scp 命令 - 远程拷贝文件"></a>scp 命令 - 远程拷贝文件</h3><p>该命令可以将本地文件拷贝到远程服务器，也可以将远程服务器的文件拷贝到本地，也可将一台服务器文件拷贝到另一台服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将本地文件拷贝到远程服务器</span><br>$ scp -r 本地文件路径 用户名@ip[:port]:远程路径<br><span class="hljs-comment"># 将本地的 2.txt 文件拷贝到 172.18.7.111 的 /root/data/ 目录下</span><br>$ scp -r 2.txt root@172.18.7.111:/root/data/<br><br><span class="hljs-comment"># 远程文件拷贝到本地</span><br>$ scp -r 用户名@ip[:port]:远程文件路径 本地路径<br><span class="hljs-comment"># 将远程的/root/2.txt 文件拷贝到本地的 /root/data 目录</span><br>$ scp -r root@172.18.7.111:/root/2.txt /root/data<br><br><span class="hljs-comment"># 服务器与服务器之间</span><br>$ scp -r 用户名@ip[:port]:远程文件路径 用户名@ip[:port]:远程文件路径<br><span class="hljs-comment"># 将 /root/tmp 拷贝到远程的 /root/data 目录下</span><br>scp -r root@192.168.5.105:/root/tmp root@192.168.5.105:/root/data/<br></code></pre></td></tr></table></figure><h3 id="mv命令-–-移动或改名文件"><a href="#mv命令-–-移动或改名文件" class="headerlink" title="mv命令 – 移动或改名文件"></a>mv命令 – 移动或改名文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mv 1.txt 2.txt<span class="hljs-comment"># 文件 1.txt 改名为 2.txt 文件</span><br>$ mv a b<span class="hljs-comment"># 目录 a 改名为 b</span><br>$ mv 1.txt b<span class="hljs-comment"># 文件 1.txt 移动到 b 目录下</span><br></code></pre></td></tr></table></figure><h3 id="tar-命令-文件打包以及解打包"><a href="#tar-命令-文件打包以及解打包" class="headerlink" title="tar 命令 - 文件打包以及解打包"></a>tar 命令 - 文件打包以及解打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar [选项] 打包文件名 文件<span class="hljs-comment"># 文件打包以及解打包</span><br>$ tar -cvf<span class="hljs-comment"># 创建归档文件</span><br>$ tar -xvf<span class="hljs-comment"># 解除归档文件</span><br>$ tar -tvf<span class="hljs-comment"># 查看归档文件内容</span><br><br>$ tar cvf 2.tar 2.txt<span class="hljs-comment"># 将 2.txt 压缩为 2.tar 包</span><br>$ tar cvf a.tar a<span class="hljs-comment"># 将 a 目录下打包到 a.tar 文件中</span><br><br>$ tar xvf 2.tar<span class="hljs-comment"># 将 2.tar 解压到当前目录</span><br>$ tar xvf 2.tar -C a/<span class="hljs-comment"># 将 2.tar 解压到 a 目录</span><br>$ tar xvf data.tar<span class="hljs-comment"># 解压 data.tar 到当前目录</span><br><br>$ tar zcvftm.tar.gz tm<span class="hljs-comment"># 将当前目录下的 tm 目录压缩为 tm.tar.gz</span><br>$ tar zxvf tm.tar.gz<span class="hljs-comment"># 将 tm.tar.gz 解压到当前目录</span><br></code></pre></td></tr></table></figure><h3 id="gzip-命令-文件压缩和解压缩"><a href="#gzip-命令-文件压缩和解压缩" class="headerlink" title="gzip 命令 - 文件压缩和解压缩"></a>gzip 命令 - 文件压缩和解压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gzip [选项] 被压缩文件<span class="hljs-comment"># tar 和 gzip 命令结合使用实现文件打包、压缩</span><br><span class="hljs-comment">#-d解压</span><br><span class="hljs-comment">#-r压缩所有文件</span><br><br>$ gzip 2.txt<span class="hljs-comment"># 将 2.txt 压缩为 2.txt.gz</span><br>$ gzip data.tar <span class="hljs-comment"># 将 data.tar 压缩为 data.tar.gz</span><br></code></pre></td></tr></table></figure><h2 id="文档编辑"><a href="#文档编辑" class="headerlink" title="文档编辑"></a>文档编辑</h2><h3 id="echo-命令-–-输出字符串或提取-Shell-变量的值"><a href="#echo-命令-–-输出字符串或提取-Shell-变量的值" class="headerlink" title="echo 命令 – 输出字符串或提取 Shell 变量的值"></a>echo 命令 – 输出字符串或提取 Shell 变量的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> Hello<span class="hljs-comment"># 打印 Hello</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><span class="hljs-comment"># 打印环境变量 PATH 的值，$ 是取变量值的符号，用法：$变量名 或者 $&#123;变量名&#125;</span><br>$ <span class="hljs-built_in">echo</span> -n Hello<span class="hljs-comment"># 打印内容但不换行</span><br></code></pre></td></tr></table></figure><h3 id="gt-和-gt-gt-命令-输出符号"><a href="#gt-和-gt-gt-命令-输出符号" class="headerlink" title="&gt; 和 &gt;&gt; 命令 - 输出符号"></a>&gt; 和 &gt;&gt; 命令 - 输出符号</h3><p><code>&gt;</code> 表示覆盖（删除原文件的内容），<code>&gt;&gt;</code> 表示追加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> Hello &gt; 1.txt<span class="hljs-comment"># 将 Hello 输出到当前目录下的 1.txt 文件</span><br><span class="hljs-comment"># 如果当前目录下没有 1.txt 文件，就会创建一个新文件</span><br><span class="hljs-comment"># 如果当前目录下有 1.txt 文件，就会删除原文件的内容</span><br>$ <span class="hljs-built_in">echo</span> 123 &gt;&gt; 1.txt<span class="hljs-comment"># 将 123 追加到当前目录下的 1.txt 文件中，如果不存在该文件需要创建一个新的文件</span><br></code></pre></td></tr></table></figure><h3 id="cat命令-–-在终端上显示文件内容"><a href="#cat命令-–-在终端上显示文件内容" class="headerlink" title="cat命令 – 在终端上显示文件内容"></a>cat命令 – 在终端上显示文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat 1.txt<span class="hljs-comment"># 查看当前目录下 1.txt 文件中的内容</span><br></code></pre></td></tr></table></figure><h3 id="more-less-命令-分页查看文件内容"><a href="#more-less-命令-分页查看文件内容" class="headerlink" title="more, less 命令 - 分页查看文件内容"></a>more, less 命令 - 分页查看文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ more 文件所在路径<span class="hljs-comment"># 按空格或回车会继续加载文件内容，按 q 退出查看，加载到文件末尾时会自动退出</span><br><br>$ less 文件所在路径<span class="hljs-comment"># 按空格继续加载文件，按 q 退出查看，不会自动退出查看</span><br></code></pre></td></tr></table></figure><h3 id="head-tail-命令-从头，从尾查看文件内容"><a href="#head-tail-命令-从头，从尾查看文件内容" class="headerlink" title="head, tail 命令 - 从头，从尾查看文件内容"></a>head, tail 命令 - 从头，从尾查看文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ head -n 文件路径<span class="hljs-comment"># 查看文件的前 n 行数据</span><br>$ tail -n 文件路径<span class="hljs-comment"># 查看文件的后 n 行数据</span><br>$ tail -f 文件路径<span class="hljs-comment"># 动态的查看文件的最后几行内容</span><br></code></pre></td></tr></table></figure><p>注意：<code>tail -f</code> 一般用来查看日志文件，按下 <code>ctrl + c</code> （暂停进程）或者 <code>ctrl + z</code> （停止进程）才会退出查看。</p><h3 id="wc-命令-查看文件的单词个数"><a href="#wc-命令-查看文件的单词个数" class="headerlink" title="wc 命令 - 查看文件的单词个数"></a>wc 命令 - 查看文件的单词个数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wc -l 1.txt<span class="hljs-comment"># -l 表示 line 行数，统计文件 1.txt 的行数</span><br>$ wc -w 1.txt<span class="hljs-comment"># -w 表示 word 单词个数，统计文件 1.txt 的单词个数</span><br></code></pre></td></tr></table></figure><h3 id="find-命令-特定目录下查找文件"><a href="#find-命令-特定目录下查找文件" class="headerlink" title="find 命令 - 特定目录下查找文件"></a>find 命令 - 特定目录下查找文件</h3><p>使用参数 <code>-name</code> 按文件名查询，使用参数 <code>-size</code> 按照文件大小查询，使用参数 <code>-type</code> 按照文件类型查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ find 路径 -name <span class="hljs-string">&quot;文件名&quot;</span><br>$ find /home -name <span class="hljs-string">&quot;a.txt&quot;</span><br>$ find *.txt<span class="hljs-comment"># 查找 txt 文件</span><br><br>$ find 路径 -size 范围<br><span class="hljs-comment"># +100k# 大小大于 100k</span><br><span class="hljs-comment"># -100k# 大小小于 100k</span><br><br>$ find 路径 -<span class="hljs-built_in">type</span> 类型<br><span class="hljs-comment"># d 目录, l 符号链接, b 块设备文件, c 字符设备文件, s socket 文件, p 管道</span><br></code></pre></td></tr></table></figure><h3 id="grep-命令-查找内容"><a href="#grep-命令-查找内容" class="headerlink" title="grep 命令 - 查找内容"></a>grep 命令 - 查找内容</h3><p>:star: <code>grep</code> 对文本文件进行模式匹配，如果找到匹配模式，<code>grep</code> 打印包含模式的所有行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep [-选项] <span class="hljs-string">&#x27;搜索内容串&#x27;</span> 文件名<br><span class="hljs-comment"># -v 显示不包含匹配文本的所有行</span><br><span class="hljs-comment"># -n 显示匹配行以及行号</span><br><span class="hljs-comment"># -i 忽略大小写</span><br><br>grep cat 1.txt<span class="hljs-comment"># 在 1.txt 文件中查找包含 cat 的行</span><br><br>| 管道符号<span class="hljs-comment"># 连接两个命令，将前一个命令的查询结果传给后一个命令</span><br>$ ps -ef | grep sshd<span class="hljs-comment"># 查看系统中 sshd 的进程</span><br><br>$ grep -v cat 1.txt<span class="hljs-comment"># 查找 1.txt 文件中不包含 1.txt 的行</span><br>$ ps -ef | grep sshd | grep -v grep<span class="hljs-comment"># 查询 sshd 进程，不包含 grep 的行</span><br></code></pre></td></tr></table></figure><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="free-命令-查看系统内存"><a href="#free-命令-查看系统内存" class="headerlink" title="free 命令 - 查看系统内存"></a>free 命令 - 查看系统内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ free<span class="hljs-comment"># 查看系统内存的使用情况</span><br>$ free -h<span class="hljs-comment"># 查看内存使用情况，以合适度量单位进行显示</span><br></code></pre></td></tr></table></figure><h3 id="df-命令-列出文件系统的整体磁盘使用量"><a href="#df-命令-列出文件系统的整体磁盘使用量" class="headerlink" title="df 命令 - 列出文件系统的整体磁盘使用量"></a>df 命令 - 列出文件系统的整体磁盘使用量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ df<span class="hljs-comment"># 查看系统磁盘的使用情况</span><br>$ df -h<span class="hljs-comment"># 查看系统硬盘使用，以合适度量单位进行显示</span><br></code></pre></td></tr></table></figure><h3 id="du-命令-检查磁盘空间使用量"><a href="#du-命令-检查磁盘空间使用量" class="headerlink" title="du 命令 - 检查磁盘空间使用量"></a>du 命令 - 检查磁盘空间使用量</h3><h3 id="ps-命令-查看系统进程的命令"><a href="#ps-命令-查看系统进程的命令" class="headerlink" title="ps 命令 - 查看系统进程的命令"></a>ps 命令 - 查看系统进程的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ps -aux<br>$ ps -ef<br></code></pre></td></tr></table></figure><h3 id="kill-命令-结束进程"><a href="#kill-命令-结束进程" class="headerlink" title="kill 命令 - 结束进程"></a>kill 命令 - 结束进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> 88742<span class="hljs-comment"># 结束 PID 为 88742 的进程</span><br><span class="hljs-built_in">kill</span> -9 PID_id<span class="hljs-comment"># 强制结束进程</span><br></code></pre></td></tr></table></figure><h2 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h2><h3 id="groupadd-groupdel-命令-创建-删除一个用户组"><a href="#groupadd-groupdel-命令-创建-删除一个用户组" class="headerlink" title="groupadd / groupdel 命令 - 创建/删除一个用户组"></a>groupadd / groupdel 命令 - 创建/删除一个用户组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ groupadd bows<span class="hljs-comment"># 创建一个叫 bows 的用户组</span><br>$ groupdel bows<span class="hljs-comment"># 当 bows 用户组下没有用户时，删除 bows 用户组</span><br></code></pre></td></tr></table></figure><h3 id="useradd-userdel-命令-创建-删除用户，用户管理"><a href="#useradd-userdel-命令-创建-删除用户，用户管理" class="headerlink" title="useradd / userdel 命令 - 创建/删除用户，用户管理"></a>useradd / userdel 命令 - 创建/删除用户，用户管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个用户，-g 指定用户的主用户组，-G 指定用户的其他用户组</span><br>$ useradd username [-g 用户组名 -G 用户组名]<br>$ id username<span class="hljs-comment"># 查看用户的 id</span><br><br>$ userdel username<span class="hljs-comment"># 删除用户</span><br><br>$ su username<span class="hljs-comment"># 切换用户，但不加载用户的环境变量</span><br>$ su - username<span class="hljs-comment"># 切换用户，并加载用户的环境变量（建议方式）</span><br><span class="hljs-comment"># 加载用户根目录下的 .bash_profile 环境变量配置文件</span><br><br>$ <span class="hljs-built_in">exit</span><span class="hljs-comment"># 退出当前用户的登录</span><br><br>$ passwd username<span class="hljs-comment"># 修改用户密码</span><br><br>$ r: 读权限，对应数字表示 4<br>$ w: 写权限，对应数字表示 2<br>$ x: 可执行权限，对应数字表示 1<br>$ +: 加上权限，-: 去掉权限<br><br><span class="hljs-comment"># Linux 常用两个命令来修改文件或目录的所属用户和权限</span><br>$ chmod 权限 文件路径<br>$ chmod u+x2.txt/Bob<span class="hljs-comment"># 给文件/用户加上执行权限</span><br></code></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="source-命令-让配置文件修改结果立即生效"><a href="#source-命令-让配置文件修改结果立即生效" class="headerlink" title="source 命令 - 让配置文件修改结果立即生效"></a>source 命令 - 让配置文件修改结果立即生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> /etc/profile<span class="hljs-comment"># 让配置文件 /etc/profile 生效</span><br></code></pre></td></tr></table></figure><h3 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">export</span> 导入全局变量（环境变量）<br></code></pre></td></tr></table></figure><h3 id="lt-lt-EOF-将-lt-lt-EOF-和-EOF-之间的多行内容传给前面的命令"><a href="#lt-lt-EOF-将-lt-lt-EOF-和-EOF-之间的多行内容传给前面的命令" class="headerlink" title="&lt;&lt; EOF - 将 &lt;&lt; EOF 和 EOF 之间的多行内容传给前面的命令"></a>&lt;&lt; EOF - 将 &lt;&lt; EOF 和 EOF 之间的多行内容传给前面的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">jnpeng@aliyun:~$ cat &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&gt; A</span><br><span class="hljs-string">&gt; B</span><br><span class="hljs-string">&gt; C</span><br><span class="hljs-string">&gt; EOF</span><br>A<br>B<br>C<br></code></pre></td></tr></table></figure><h3 id="cut-命令-截取命令"><a href="#cut-命令-截取命令" class="headerlink" title="cut 命令 - 截取命令"></a>cut 命令 - 截取命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">-f 参数，指定列<br>-d 参数，参数指定列和列之间的分隔符，默认的分隔符是 \t （行向制表符）<br>cut -f 1 1.txt<span class="hljs-comment"># 取 1.txt 文件中的第 1 列内容（列分隔符默认为\t）</span><br>cut -f 1 -d <span class="hljs-string">&#x27;,&#x27;</span> 2.txt<span class="hljs-comment"># 取 2.txt 文件中的第 1 列内容，列分隔符为，</span><br></code></pre></td></tr></table></figure><h3 id="printf-命令"><a href="#printf-命令" class="headerlink" title="printf 命令"></a>printf 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ %ns<span class="hljs-comment"># 输出字符串，n 是数字，指代输出几个字符</span><br>$ %ni<span class="hljs-comment"># 输出整数，n 是数字，指代输出几个数字</span><br>$ %m.nf<span class="hljs-comment"># 位数和小数位数。例如：%8.2f 代表输出 8 位数，其中2位是小数，6位是整数</span><br></code></pre></td></tr></table></figure><h3 id="service-命令"><a href="#service-命令" class="headerlink" title="service 命令"></a>service 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">enable</span> | <span class="hljs-built_in">disable</span> | start | stop | restart | status<br>start: 启动服务<br>stop: 关闭服务<br>restart: 重启服务<br>status: 查看服务状态<br></code></pre></td></tr></table></figure><h3 id="tree-树形显示指定目录内容"><a href="#tree-树形显示指定目录内容" class="headerlink" title="tree - 树形显示指定目录内容"></a>tree - 树形显示指定目录内容</h3><h3 id="安装包管理"><a href="#安装包管理" class="headerlink" title="安装包管理"></a>安装包管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install &lt;package_name&gt;<span class="hljs-comment"># 安装指定的软件</span><br>$ sudo apt update &lt;package_name&gt;<span class="hljs-comment"># 更新指定的软件</span><br>$ sudo apt update<span class="hljs-comment"># 列出所有可以更新的软件清单命令</span><br>$ sudo apt show &lt;package_name&gt;<span class="hljs-comment"># 显示软件包具体信息</span><br>$ sudo apt remove &lt;package_name&gt;<span class="hljs-comment"># 删除软件包命令</span><br>$ sudo apt upgrade<span class="hljs-comment"># 升级软件包</span><br>$ apt list --upgradeable<span class="hljs-comment"># 列出可更新的软件包及版本信息</span><br></code></pre></td></tr></table></figure><h3 id="Linux-文件链接"><a href="#Linux-文件链接" class="headerlink" title="Linux 文件链接"></a>Linux 文件链接</h3><p>Linux 文件链接分为两种：硬链接（Hard Link），符号链接（Symbolic Link）。</p><p><strong>硬链接</strong>：通过索引节点进行链接。Linux 文件系统中每个文件分配了一个索引节点号，Linux 中多个文件名指向同一个索引节点。一个索引节点对应两个不同的文件名，两个文件名指向同一个文件，删除其中一个不会影响另外一个的访问。</p><p><strong>软链接</strong>：类似快捷方式，假设 B 是 A 的软链接，B 的目录项中的 inode 节点号与 A 中的目录项中的 inode 节点号不同，B 和 A 指向的是两个不同的 inode ，继而指向两块不同的数据块。但是 B 的数据块中存放的是 A 的路径名，A 和 B 之间是主从关系，如果 B 删除了，A 仍然存在，但指向一个无效的链接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> touch f1<span class="hljs-comment">#创建一个测试文件 f1</span></span><br><span class="hljs-meta">$</span><span class="bash"> ln f1 f2<span class="hljs-comment">#创建f1的一个硬连接文件f2</span></span><br><span class="hljs-meta">$</span><span class="bash"> ln -s f1 f3<span class="hljs-comment">#创建f1的一个符号连接文件f3</span></span><br><span class="hljs-meta">$</span><span class="bash"> ls -li<span class="hljs-comment"># -i 参数显示文件的inode节点信息</span></span><br></code></pre></td></tr></table></figure><div align = center><img src = "https://figs-1308257758.cos.ap-nanjing.myqcloud.com/img/Linux%E5%9F%BA%E7%A1%804.png" width = "500px"/></div><p>测试结果：删除原始文件 <code>f1</code> 之后，硬连接 <code>f2</code> 不受影响，但是符号连接 <code>f3</code> 文件失效。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://linux.cn/article-3159-1.html">详解Linux与Unix系统的区别与联系</a></p><p>华为云开发者社区：<a href="https://blog.csdn.net/devcloud/article/details/112648614?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163680083016780357265345%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163680083016780357265345&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-19-112648614.pc_v2_rank_blog_default&utm_term=Linux&spm=1018.2226.3001.4450">Linux 命令大全</a></p><p><a href="https://www.linuxcool.com/">Linux 命令大全</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
